#!/bin/bash -e

REPEAT=5                             # number of times to repeat all the tests
WORKER="rocks02"                     # hostname of worker node
OUTDIR="/root/results/output"        # dir for script output
RESDIR="/root/results/kube"          # path to directory for test results
XMLDIR="/root/testcfg/kube/xml"      # path to directory for test XML
YAMLDIR="/root/testcfg/kube/yaml"    # path to directory for test YAML
FLAGDIR="/root/testcfg/kube/flags"   # path to directory for guest vCPU flags
BASEYAML="/root/yaml/kube.yaml"      # path to base YAML file

POD=                                 # name of launcher pod
VMI=                                 # name of the vm instance
IVM=                                 # name of the vm inside of the pod
XML=                                 # holds current test XML
YAML=                                # holds current test YAML
VMIP=                                # the current VM's IP address
STRESSER=                            # process ID of the host load stresser

#============== initial checks =============================================

# check that the named YAML file exists
if [[ ! -f "$BASEYAML" ]]; then
    echo >&2 "File $BASEYAML doesn't exist"
    exit 1
fi

# check that there are no running VMs
if kubectl get pods --all-namespaces | grep -qE '^\S+ *virt-launcher-'; then
    echo >&2 "There are launcher pods running, please delete them"
    exit 1
fi

#============== functions ==================================================

# all the tests to run via ssh
# arg is the cpu topology name (used as a filename suffix)
runtests() {
    echo "* runtests $*"
    testheader "$1"

    echo; echo "---------- cyclictest ----------"
    sshrun cyclictest -t 2 -v -l 100000

    echo; echo "-------------- NPB --------------"
    for NPB in bt.C.x cg.C.x ep.C.x ft.C.x is.C.x lu.C.x mg.C.x sp.C.x ua.C.x; do
        echo; echo "Time now: $(date '+%F %T %Z')"
        echo; echo "--- NPB class $NPB start ---"
        if [[ -z "$2" ]]; then
            OMP_THREADS=2
        else
            OMP_THREADS="$2"
        fi
        sshrun "OMP_NUM_THREADS=$OMP_THREADS $NPB"
        echo; echo "--- NPB class $NPB end ---"
    done

    testfooter
}

# run or stop load stresser in the background
stress() {
    echo "* stress $*"
    return # FIXME
    STRESSER="$(pgrep stress-ng | grep -x "$STRESSER")"
    if [[ "$1" == "on" ]]; then
        if [[ -n "$STRESSER" ]]; then
            echo >&2 "Stress-ng is already running"
            return
        fi
        if [[ "$(</sys/devices/system/cpu/smt/control)" == "on" ]]; then
            stress-ng --cpu 20 --cpu-method fibonacci --cpu-load 50 &
        else
            stress-ng --cpu 10 --cpu-method fibonacci --cpu-load 50 &
        fi
        STRESSER="$!"
        trap 'stress off; cpupower frequency-set -g powersave' EXIT
    else
        if [[ -n "$STRESSER" ]]; then
            kill "$STRESSER" || true
            sleep 10        # let the CPU cool off
        else
            echo >&2 "Stress-ng is not running"
        fi
        trap 'cpupower frequency-set -g powersave' EXIT
    fi
}

# separate out the rather complex header code, and I/O redirection
# arg is the logfile suffix
testheader() {
    local FLAGS
    echo "$XML" > "$XMLDIR/$VMI-$1.xml"
    echo "$YAML" > "$YAMLDIR/$VMI-$1.yaml"
    exec &>> "$RESDIR/$VMI-$1.txt" # redirect all stdout and stderr to the results file
    echo "==================== Starting $(date '+%F %T %Z') ===================="
    # show the current hyperthread and pinning config
    echo -n "Hyperthreading is $(workerrun cat /sys/devices/system/cpu/smt/control), with "
    if kvrun virsh vcpuinfo "$IVM" | grep -q '^CPU Affinity: *-'; then
        echo "this vCPU pinning:"
        kvrun virsh vcpuinfo "$IVM" \
        | sed -r '/State|time/d;/./{H;d};x;s/CPU //;s/  +/ /g;
        s/^\n//;s/\n/, /g;s/( CPU: )([0-9])\>/\1 \2/g'
    else
        echo "no pinning."
    fi
    # show what cores the guest can see, including whether it is hyperthread aware
    sshrun 'grep -H ^ /sys/devices/system/cpu/cpu*/topology/thread_siblings_list \
    | sed -r '\''s/^[^0-9]+([0-9]+)[^:]+:([^,-]*)[,-]?\<\1\>[,-]?([^,-]*)$/\1:\2\3/;s/:$//;
    s/:(.+)/(sib=\1)/;H;$!d;g;s/\n/  /g;s/\)$/)  hyperthread aware/;s/^/Guest cores:/'\'

    FLAGS="$(sshrun lscpu | sed -nr '/^Flags: /{s/^Flags: *//;s/ +/\n/g;p}' | sort)"
    echo "Extra guest vCPU flags not on host:" > "$FLAGDIR/$VMI-$1.txt"
    comm -13 "$FLAGDIR/HOST.txt" <(echo "$FLAGS") >> "$FLAGDIR/$VMI-$1.txt"
    echo -e '\nHost CPU flags missing in guest:' >> "$FLAGDIR/$VMI-$1.txt"
    comm -23 "$FLAGDIR/HOST.txt" <(echo "$FLAGS") >> "$FLAGDIR/$VMI-$1.txt"
}

# separate out the footer and close I/O redirect
testfooter() {
    echo; echo "==================== Stopping $(date '+%F %T %Z') ===================="; echo
    exec >&3 2>&4 # end the I/O redirection
}

workerrun() {
    ssh root@"$WORKER" "$@"
}

# factor out the tedious repetition of ssh root@"$VMIP"
sshrun() {
    ssh -o CheckHostIP=no root@"$VMIP" "$@"
}

kvrun() {
    kubectl exec "$POD" -- "$@"
}

# read the IP of the VM
getip() {
    echo "* getip"
    local WAIT
    let WAIT=EPOCHSECONDS+40
    while true; do
        VMIP="$(kubectl get vmi | sed -nr "s/^$VMI"' *\S+ *Running *(\S+) *\S+ *True$/\1/p')"
        if [[ -n "$VMIP" ]]; then
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "Failed to get IP of VMI $VMI"
            exit 1
        fi
        echo "Waiting to get IP of VMI $VMI - $((WAIT-EPOCHSECONDS))"
        sleep 1
    done
    echo "VMIP is $VMIP"
}

kvstart() {
    local CORES="$1" THREADS="${2:-1}" DCP="$3"
    if [[ "$DCP" == "pin" ]]; then DCP="true"; else DCP="false"; fi
    VMI="$(sed -nr '/name:/{s/^.*name: *(\S+).*/\1/p;q}' "$BASEYAML")"
    YAML="$(sed -r "s/ cores:.*/ cores: $CORES/" "$BASEYAML")"
    YAML="$(sed -r "s/ threads:.*/ threads: $THREADS/" <<<"$YAML")"
    YAML="$(sed -r "s/ dedicatedCpuPlacement:.*/ dedicatedCpuPlacement: $DCP/" <<<"$YAML")"
    if ! kubectl apply -f <(echo "$YAML"); then
        echo >&2 "Failed to start $VMI"
        exit 1
    fi
    kubectl wait --for=condition=Ready pods --all -n default
    # get the launcher pod name
    POD="$(kubectl get pod | sed -nr 's/^(virt-launcher-\S*).*/\1/p')"
    echo "POD=$POD"
    getip       # also get the IP
    # get the internal VM name
    IVM="$(kvrun virsh list | sed -nr 's/^ *[0-9]+ *(\S+) *running$/\1/p')"
    echo "IVM=$IVM"
    XML="$(kvrun virsh dumpxml "$IVM")"
    sleep 2
    waitssh     # also wait for ssh daemon
}

# wait for the VM to boot and ssh daemon to be ready
waitssh() {
    echo "* waitssh"
    local WAIT
    let WAIT=EPOCHSECONDS+40
    while true; do
        if nc -nzw2 "$VMIP" 22; then # test if port 22 is open
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "VMI $VMI failed to boot"
            exit 1
        fi
        echo "Waiting for ssh on VMI $VMI IP $VMIP - $((WAIT-EPOCHSECONDS))"
        sleep 2
    done
}

# tell the VM to shutdown
kvstop() {
    echo "* kvstop"
    kubectl delete vmis "$VMI"
    waitstop    # also wait for it to shut down
}

# wait for the VM to shutdown
waitstop() {
    echo "* waitstop"
    local WAIT
    let WAIT=EPOCHSECONDS+20
    while true; do
        # |& combines both stdout and stderr into the pipe
        if ! kubectl get vmi |& grep -qE "^$VMI "; then
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "VMI $VMI failed to shut down"
            exit 1
        fi
        echo "Waiting for VMI $VMI to shutdown - $((WAIT-EPOCHSECONDS))"
        sleep 2
    done
}

waitworkerup() {
    let WAIT=EPOCHSECONDS+"$1"
    while true; do
        # test if port 22 is open
        if nc -nzw2 "$(getent ahostsv4 "$WORKER" | sed -nr 's/^(\S+) *STREAM.*/\1/p')" 22; then
            echo "Worker node $WORKER up"
            if kubectl wait --for=condition=Ready nodes \
                --timeout="$2"s --all --all-namespaces \
                && kubectl wait --for=condition=Ready pods \
                --timeout="$2"s --all --all-namespaces
            then
                echo "Worker node $WORKER ready"
                break
            else
                echo "Worker node $WORKER up but kubelet service not responding"
                exit 1
            fi
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "Worker node $WORKER failed to reboot back up"
            exit 1
        fi
        echo "Waiting for worker to reboot back up $((WAIT-EPOCHSECONDS))"
        sleep 2
    done
}

waitworkerdown() {
    let WAIT=EPOCHSECONDS+"$1"
    while true; do
        if ! ping -l 3 -c 3 -w 5 -q "$WORKER" &> /dev/null; then
            echo "Worker node $WORKER down for reboot"
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "Worker node $WORKER failed to go down for reboot"
            exit 1
        fi
        echo "Waiting for worker to go down for reboot $((WAIT-EPOCHSECONDS))"
    done
}

#============== main code ==================================================

# ensure that the results and XML output dirs exist
mkdir -p "$OUTDIR"
mkdir -p "$RESDIR"
mkdir -p "$XMLDIR"
mkdir -p "$YAMLDIR"
mkdir -p "$FLAGDIR"
# mkdir -p "$JSONDIR"

{

exec 3>&1   # save stdout to spare file handle 3
exec 4>&2   # save stderr to spare file handle 4

while [[ "$REPEAT" -gt 0 ]]; do

    workerrun lscpu \
    | sed -nr '/^Flags: /{s/^Flags: *//;s/ +/\n/g;p}' \
    | sort > "$FLAGDIR/HOST.txt"

    # set CPU freq scaling governor to use the "performance" profile
    trap 'workerrun cpupower frequency-set -g powersave' EXIT
    workerrun cpupower frequency-set -g performance >/dev/null
    workerrun cpupower frequency-info -p

    if [[ "$(workerrun cat /sys/devices/system/cpu/smt/control)" == "on" ]]; then
        # ht on

        kvstart 2 1
        sshrun hostname
        kvstop

        kvstart 4 1
        sshrun "date '+%F %T %Z'" # quick check ssh connection
        runtests hton-htunaware-nopin-4x1-idle
        kvstop

        kvstart 4 1 pin
        runtests hton-htunaware-pin-4x1-idle
        kvstop

        kvstart 2 2
        runtests hton-htaware-nopin-2x2-idle
        kvstop

        kvstart 2 2 pin
        runtests hton-htaware-pin-2x2-idle
        kvstop

        kvstart 2 2 pin
        runtests hton-htaware-pin-2x2-npb4-idle 4
        kvstop

        kvstart 2 1 pin
        runtests hton-htunaware-pin-2x1-idle
        kvstop

        kvstart 2 1
        runtests hton-htunaware-nopin-2x1-idle
        kvstop

        kvstart 1 2 pin
        runtests hton-htaware-pin-1x2-idle
        kvstop

        kvstart 1 2
        runtests hton-htaware-nopin-1x2-idle
        kvstop

    else : # ht off

        kvstart 4 1
        runtests htoff-htunaware-nopin-4x1-idle
        kvstop

        kvstart 4 1 pin
        runtests htoff-htunaware-pin-4x1-idle
        kvstop

        kvstart 2 2 pin
        runtests htoff-htaware-pin-2x2-fakesib-idle
        kvstop

        kvstart 2 2 pin
        runtests htoff-htaware-pin-2x2-fakesib-npb4-idle 4
        kvstop

        kvstart 2 1 pin
        runtests htoff-htunaware-pin-2x1-idle
        kvstop

        kvstart 2 1
        runtests htoff-htunaware-nopin-2x1-idle
        kvstop

        kvstart 1 1 pin
        runtests htoff-htunaware-pin-1x1-idle
        kvstop

        kvstart 1 1
        runtests htoff-htunaware-nopin-1x1-idle
        kvstop

    fi

    #============== Final tidy up ===============================================

    echo; echo "Tests completed for ht=$(workerrun cat /sys/devices/system/cpu/smt/control)"
    workerrun cpupower frequency-set -g powersave >/dev/null
    workerrun cpupower frequency-info -p
    trap EXIT

    if [[ "$1" == "reboot" ]]; then
        if [[ "$(workerrun cat /sys/devices/system/cpu/smt/control)" == "on" ]]; then
            echo "Rebooting worker node $WORKER into nosmt mode"
            workerrun grub-reboot nosmt
            workerrun reboot || true
            waitworkerdown 20
            waitworkerup 240 60      # boot timeout, kubelet timeout
        else
            echo "Rebooting worker node $WORKER into normal smt mode"
            workerrun reboot || true
            waitworkerdown 20
            waitworkerup 240 60      # boot timeout, kubelet timeout
            REPEAT="$((REPEAT-1))"
        fi
    else
        echo "Single pass done"
        REPEAT="$((REPEAT-1))"
    fi

done

} |& tee -a "$OUTDIR/kube.txt"
echo "Done"
