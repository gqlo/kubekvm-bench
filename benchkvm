#!/bin/bash -e

REPEAT=5                           # number of times to repeat all the tests
NAME="kvm"                         # name of the VM to use for testing
CONTFILE="/root/benchkvm-continue" # continue file tracks loops across reboots
OUTDIR="/root/results/output"      # dir for script output
RESDIR="/root/results/kvm"         # path to directory for test results
# JSONDIR="/root/results/kvm/json"   # dir for cyclictest json data
XMLDIR="/root/testcfg/kvm/xml"     # path to directory for test XML
FLAGDIR="/root/testcfg/kvm/flags"  # path to directory for guest vCPU flags

XML=                               # holds current test XML
VMIP=                              # the current VM's IP address
STRESSER=                          # process ID of the host load stresser

#============== initial checks =============================================

# check that the named VM exists
if ! virsh list --all | grep -qE "^ *\S+ +$NAME "; then
    echo >&2 "VM $NAME doesn't exist"
    exit 1
fi

# check that the named VM does not already have vCPU pinning
if virsh vcpuinfo "$NAME" | grep -q '^CPU Affinity: *-'; then
    echo >&2 "VM $NAME already has vCPU pinning"
    exit 1
fi

# check that there are no running VMs
if virsh list | grep -q 'running$'; then
    echo >&2 "There are VMs running, please shut them down"
    exit 1
fi

#============== functions ==================================================

# all the tests to run via ssh
# arg is the cpu topology name (used as a filename suffix)
runtests() {
    echo "* start runtests $*"
    testheader "$1"

    echo; echo "---------- cyclictest ----------"
    sshrun cyclictest -t 2 -v -l 100000

    echo; echo "-------------- NPB --------------"
    for NPB in bt.C.x cg.C.x ep.C.x ft.C.x is.C.x lu.C.x mg.C.x sp.C.x ua.C.x; do
        echo; echo "Time now: $(date '+%F %T %Z')"
        echo; echo "--- NPB class $NPB start ---"
        if [[ -z "$2" ]]; then
            OMP_THREADS=2
        else
            OMP_THREADS="$2"
        fi
        sshrun "OMP_NUM_THREADS=$OMP_THREADS $NPB"
        echo; echo "--- NPB class $NPB end ---"
    done

    testfooter
    echo "* end runtests $*"
}

# run or stop load stresser in the background
stress() {
    echo "* stress $*"
    return # FIXME
    STRESSER="$(pgrep stress-ng | grep -x "$STRESSER")"
    if [[ "$1" == "on" ]]; then
        if [[ -n "$STRESSER" ]]; then
            echo >&2 "Stress-ng is already running"
            return
        fi
        if [[ "$(</sys/devices/system/cpu/smt/control)" == "on" ]]; then
            stress-ng --cpu 20 --cpu-method fibonacci --cpu-load 50 &
        else
            stress-ng --cpu 10 --cpu-method fibonacci --cpu-load 50 &
        fi
        STRESSER="$!"
        trap 'stress off; cpupower frequency-set -g powersave' EXIT
    else
        if [[ -n "$STRESSER" ]]; then
            kill "$STRESSER" || true
            sleep 10        # let the CPU cool off
        else
            echo >&2 "Stress-ng is not running"
        fi
        trap 'cpupower frequency-set -g powersave' EXIT
    fi
}

# separate out the rather complex header code, and I/O redirection
# arg is the logfile suffix
testheader() {
    local FLAGS
    echo "$XML" > "$XMLDIR/$NAME-$1.xml"
    exec &>> "$RESDIR/$NAME-$1.txt" # redirect all stdout and stderr to the results file
    echo "==================== Starting $(date '+%F %T %Z') ===================="
    # show the current hyperthread and pinning config
    echo -n "Hyperthreading is $(</sys/devices/system/cpu/smt/control), with "
    if virsh vcpuinfo "$NAME" | grep -q '^CPU Affinity: *-'; then
        echo "this vCPU pinning:"
        virsh vcpuinfo "$NAME" \
        | sed -r '/State|time/d;/./{H;d};x;s/CPU //;s/  +/ /g;
        s/^\n//;s/\n/, /g;s/( CPU: )([0-9])\>/\1 \2/g'
    else
        echo "no pinning."
    fi
    # show what cores the guest can see, including whether it is hyperthread aware
    sshrun 'grep -H ^ /sys/devices/system/cpu/cpu*/topology/thread_siblings_list \
    | sed -r '\''s/^[^0-9]+([0-9]+)[^:]+:([^,-]*)[,-]?\<\1\>[,-]?([^,-]*)$/\1:\2\3/;s/:$//;
    s/:(.+)/(sib=\1)/;H;$!d;g;s/\n/  /g;s/\)$/)  hyperthread aware/;s/^/Guest cores:/'\'

    FLAGS="$(sshrun lscpu | sed -nr '/^Flags: /{s/^Flags: *//;s/ +/\n/g;p}' | sort)"
    echo "Extra guest vCPU flags not on host:" > "$FLAGDIR/$NAME-$1.txt"
    comm -13 "$FLAGDIR/HOST.txt" <(echo "$FLAGS") >> "$FLAGDIR/$NAME-$1.txt"
    echo -e '\nHost CPU flags missing in guest:' >> "$FLAGDIR/$NAME-$1.txt"
    comm -23 "$FLAGDIR/HOST.txt" <(echo "$FLAGS") >> "$FLAGDIR/$NAME-$1.txt"
}

# separate out the footer and close I/O redirect
testfooter() {
    echo; echo "==================== Stopping $(date '+%F %T %Z') ===================="; echo
    exec >&3 2>&4 # end the I/O redirection
}

# factor out the tedious repetition of ssh root@"$VMIP"
sshrun() {
    ssh root@"$VMIP" "$@"
}

# read the IP of the VM
getip() {
    echo "* getip"
    local WAIT
    let WAIT=EPOCHSECONDS+40
    while true; do
        VMIP="$(virsh domifaddr "$NAME" | sed -nr 's,.* (\S+)/.*,\1,p')"
        if [[ -n "$VMIP" ]]; then
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "VM $NAME get IP timed out"
            exit 1
        fi
        echo "Waiting to get IP of VM $NAME - $((WAIT-EPOCHSECONDS))"
        sleep 1
    done
    echo "VMIP is $VMIP"
}

# start the VM with the given vCPU pinning
# with no args, it starts the VM without pinning
# otherwise the args are the host CPU numbers to pin to, eg:
# vmstart 1 17 2 18 ht
vmstart() {
    echo "* vmstart $*"
    local CORES=0 TH=1 MIN MAX PIN=""
    IFS=- read MIN MAX < /sys/devices/system/cpu/online
    while [[ $# -ne 0 ]]; do
        if [[ "$1" == "ht" ]]; then
            TH=2
        else
            if [[ "$1" -lt "$MIN" || "$1" -gt "$MAX" ]]; then
                echo >&2 "Cannot pin VM $NAME to core $1 when only cores $MIN..$MAX are available"
                exit 1
            fi
            PIN="$PIN,vcpupin$CORES.vcpu=$CORES,vcpupin$CORES.cpuset=$1"
            let CORES=CORES+1
        fi
        shift
    done
    if [[ "$CORES" -eq 0 ]]; then
        CORES="$(virsh vcpucount "$NAME" | sed -n 's/^maximum *config *//p')"
    fi
    XML="$(virt-xml "$NAME" --edit --vcpus=vcpu="$CORES" --print-xml)"
    CORES="$((CORES/TH))"
    XML="$(virt-xml <<<"$XML" --edit --cpu=clearxml=yes,mode=host-passthrough,topology.sockets=1,topology.cores="$CORES",topology.threads="$TH" --print-xml)"
    XML="$(virt-xml <<<"$XML" --edit --cputune=clearxml=yes"$PIN" --print-xml)"
    echo "Starting VM $NAME with cores=$CORES threads=$TH"
    # <() syntax creates a tmp file that virsh can read
    if ! virsh create <(echo "$XML"); then
        echo >&2 "Failed to start $NAME"
        exit 1
    fi
    sleep 2
    getip       # also get the IP
    waitssh     # also wait for ssh daemon
}

# wait for the VM to boot and ssh daemon to be ready
waitssh() {
    echo "* waitssh"
    local WAIT
    let WAIT=EPOCHSECONDS+40
    while true; do
        if nc -nzw2 "$VMIP" 22; then # test if port 22 is open:
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "VM $NAME failed to boot"
            exit 1
        fi
        echo "Waiting for ssh on VM $NAME IP $VMIP - $((WAIT-EPOCHSECONDS))"
        sleep 2
    done
}

# tell the VM to shutdown
vmstop() {
    echo "* vmstop"
    ssh root@"$VMIP" poweroff || true
    waitstop    # also wait for it to shut down
}

# wait for the VM to shutdown
waitstop() {
    echo "* waitstop"
    local WAIT
    let WAIT=EPOCHSECONDS+20
    while true; do
        if virsh list --all | grep -qE "^ *\S+ +$NAME +shut off$"; then
            break
        fi
        if [[ "$EPOCHSECONDS" -gt "$WAIT" ]]; then
            echo >&2 "VM $NAME failed to shut down"
            exit 1
        fi
        echo "Waiting for VM $NAME to shutdown - $((WAIT-EPOCHSECONDS))"
        sleep 2
    done
}

# decrement the counter in CONTFILE
# and exit when the counter reaches zero
countdown() {
    echo "* countdown"
    local CONT
    # create the CONTFILE if it does not exist
    if [[ ! -f "$CONTFILE" ]]; then
        echo "Creating CONTFILE $CONTFILE with REPEAT=$REPEAT"
        # make sure the dir exists if the filename has a slash
        if [[ "$CONTFILE" =~ / ]]; then
            mkdir -p "${CONTFILE%/*}"
        fi
        # start with REPEAT loops to do
        echo "$REPEAT" > "$CONTFILE"
    else
        # if it exits, read the counter from CONTFILE
        CONT="$(<"$CONTFILE")"
        echo -n "Decrementing CONT from $CONT to "
        # and decrement it by one
        CONT="$((CONT-1))"
        # WARNING do not write let CONT-=1 or ((CONT-=1))
        # because they have a false exit code which causes
        # bash to trigger the "errexit" feature
        echo "$CONT"
        # if there are still more loops to do
        if [[ "$CONT" -gt 0 ]]; then
            echo "Updating CONTFILE with CONT=$CONT"
            # then update the CONTFILE
            echo "$CONT" > "$CONTFILE"
        else
            echo "Removing CONTFILE"
            # no more loops, so remove the CONTFILE and exit
            rm "$CONTFILE"
        fi
    fi
}

#============== main code ==================================================

# ensure that the results and XML output dirs exist
mkdir -p "$OUTDIR"
mkdir -p "$RESDIR"
mkdir -p "$XMLDIR"
mkdir -p "$FLAGDIR"
# mkdir -p "$JSONDIR"

if [[ ! -f "$CONTFILE" ]]; then
    countdown
fi

{

    exec 3>&1   # save stdout to spare file handle 3
    exec 4>&2   # save stderr to spare file handle 4

    lscpu | sed -nr '/^Flags: /{s/^Flags: *//;s/ +/\n/g;p}' \
    | sort > "$FLAGDIR/HOST.txt"

    # set CPU freq scaling governor to use the "performance" profile
    trap 'cpupower frequency-set -g powersave' EXIT
    cpupower frequency-set -g performance >/dev/null
    cpupower frequency-info -p

    if [[ "$(</sys/devices/system/cpu/smt/control)" == "on" ]]; then # ht on

        vmstart
        sshrun "date '+%F %T %Z'" # quick check ssh connection
        runtests hton-htunaware-nopin-4x1-idle
        vmstop

        vmstart 0 2 4 6
        runtests hton-htunaware-pin-4x1-idle
        vmstop

        vmstart 0 2 8 10
        runtests hton-htunaware-pin-4x1-numasplit-idle
        vmstop

        vmstart 1 17 2 18
        runtests hton-htunaware-pin-2x2-fakeindep-idle
        vmstop

        vmstart 1 17 2 18 ht
        runtests hton-htaware-pin-2x2-idle
        vmstop

        vmstart 1 2 17 18 ht
        runtests hton-htaware-pin-2x2-mistopo-idle
        vmstop

        vmstart 1 17 2 18 ht
        runtests hton-htaware-pin-2x2-npb4-idle 4
        vmstop

        vmstart 0 2
        runtests hton-htunaware-pin-2x1-idle
        vmstop

        vmstart 1 17 ht
        runtests hton-htaware-pin-1x2-idle
        vmstop

    else # ht off

        vmstart
        runtests htoff-htunaware-nopin-4x1-idle
        vmstop

        vmstart 0 2 4 6
        runtests htoff-htunaware-pin-4x1-idle
        vmstop

        vmstart 0 2 8 10
        runtests htoff-htunaware-pin-4x1-numasplit-idle
        vmstop

        vmstart 0 2 4 6 ht
        runtests htoff-htaware-pin-4x1-fakesib-idle
        vmstop

        vmstart 0 2
        runtests htoff-htunaware-pin-2x1-idle
        vmstop

        vmstart 0 2 4 6 ht
        runtests htoff-htaware-pin-2x2-fakesib-npb4-idle 4
        vmstop

        vmstart 0
        runtests htoff-htunaware-pin-1x1-idle
        vmstop

    fi

    #============== Final tidy up ===============================================

    echo; echo "Tests completed for ht=$(</sys/devices/system/cpu/smt/control)"
    cpupower frequency-set -g powersave >/dev/null
    cpupower frequency-info -p
    trap EXIT

    if [[ "$1" == "reboot" ]]; then
        if [[ "$(</sys/devices/system/cpu/smt/control)" == "on" ]]; then
            echo "Rebooting into nosmt mode"
            grub-reboot nosmt
        else
            echo "Rebooting back into normal smt mode"
            countdown
        fi
        sync
        reboot
    else
        countdown
        # run this same script again without nesting shells
        test -f "$CONTFILE" && exec "$0"
    fi

} |& tee -a "$OUTDIR/kvm.txt"
